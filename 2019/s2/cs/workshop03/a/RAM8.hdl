// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM8.hdl

/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then
 * the in value is loaded into the memory location specified by address
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    DMux(in=load,sel=address[0],a=dmux01A,b=dmux01B);

    DMux(in=dmux01A,sel=address[1],a=dmux02A,b=dmux02B);
    DMux(in=dmux01B,sel=address[1],a=dmux02C,b=dmux02D);

    DMux(in=dmux02A,sel=address[2],a=dmux03A,b=dmux03B);
    DMux(in=dmux02B,sel=address[2],a=dmux03C,b=dmux03D);
    DMux(in=dmux02C,sel=address[2],a=dmux03E,b=dmux03F);
    DMux(in=dmux02D,sel=address[2],a=dmux03G,b=dmux03H);

    Register(in=in,load=dmux03A,out=regA);
    Register(in=in,load=dmux03B,out=regB);
    Register(in=in,load=dmux03C,out=regC);
    Register(in=in,load=dmux03D,out=regD);
    Register(in=in,load=dmux03E,out=regE);
    Register(in=in,load=dmux03F,out=regF);
    Register(in=in,load=dmux03G,out=regG);
    Register(in=in,load=dmux03H,out=regH);

    Mux16(a=regA,b=regB,sel=address[2],out=mux01A);
    Mux16(a=regC,b=regD,sel=address[2],out=mux01B);
    Mux16(a=regE,b=regF,sel=address[2],out=mux01C);
    Mux16(a=regG,b=regH,sel=address[2],out=mux01D);

    Mux16(a=mux01A,b=mux01B,sel=address[1],out=mux02A);
    Mux16(a=mux01C,b=mux01D,sel=address[1],out=mux02B);

    Mux16(a=mux02A,b=mux02B,sel=address[0],out=out);

}
